[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]] # hybrid
repo = 'w0ng/vim-hybrid'

[[plugins]] # ステータスライン
repo = 'itchyny/lightline.vim'
hook_add = '''
    let g:lightline = {'colorscheme': 'wombat'}
'''

[[plugins]] # Toml
repo  = 'cespare/vim-toml'

[[plugins]] # typescript-vim
repo  = 'leafgarland/typescript-vim'

[[plugins]] # Golang
repo = 'fatih/vim-go'
hook_add = '''
    let g:go_highlight_functions = 1
    let g:go_highlight_methods = 1
    let g:go_highlight_fields = 1
    let g:go_highlight_types = 1
    let g:go_highlight_operators = 1
    let g:go_highlight_build_constraints = 1
    let g:go_fmt_command = "goimports"
    let g:go_file_type = "quickfix"
    let g:go_def_mode = "guru"
    let g:neomake_go_enabled_makers = ['golint', 'govet']
'''

[[plugins]] # Japanese doc
repo = 'vim-jp/vimdoc-ja'
hook_add = 'set helplang=ja,en'

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
    noremap <C-K> :NERDTree<CR>
    noremap <C-J> :NERDTreeFind<CR>
'''

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'h1mesuke/vim-alignta'

[[plugins]]
repo = 'tacahiroy/ctrlp-funky'

[[plugins]]
repo = 'junegunn/fzf'
build = './install --bin'
merged = '0'

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = 'fzf'
hook_add = '''
    let $FZF_DEFAULT_COMMAND='rg --files --hidden --follow --glob "!.git/*"'
    nnoremap <C-P> :Files<CR>
    nnoremap <C-"> :GFiles?<CR>
    nnoremap <C-'> :FzfRg<CR>

    command! -bang -nargs=* FzfRg
      \ call fzf#vim#grep(
      \   'rg --line-number --no-heading '.shellescape(<q-args>), 0,
      \   fzf#vim#with_preview({'options': '--exact --reverse'}, 'right:50%:wrap'))
'''

[[plugins]]
repo = 'prabirshrestha/async.vim'

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
hook_add = '''

if executable('gopls')
  augroup LspGo
    au!
    autocmd User lsp_setup call lsp#register_server({
        \ 'name': 'go-lang',
        \ 'cmd': {server_info->['gopls']},
        \ 'whitelist': ['go'],
        \ 'workspace_config': {'gopls': {
        \     'staticcheck': v:true,
        \     'completeUnimported': v:true,
        \     'caseSensitiveCompletion': v:true,
        \     'usePlaceholders': v:true,
        \     'completionDocumentation': v:true,
        \     'watchFileChanges': v:true,
        \     'hoverKind': 'SingleLine',
        \   }},
        \ })
    autocmd FileType go setlocal omnifunc=lsp#complete
    autocmd FileType go nmap <buffer> gd <plug>(lsp-definition)
    autocmd FileType go nmap <buffer> ,n <plug>(lsp-next-error)
    autocmd FileType go nmap <buffer> ,p <plug>(lsp-previous-error)
  augroup END
endif

let $PATH="/usr/local/opt/llvm/bin:".$PATH
if executable('clangd')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'clangd',
        \ 'cmd': {server_info->['clangd']},
        \ 'whitelist': ['c', 'cpp', 'objc', 'objcpp'],
        \ })
endif

let g:lsp_signs_enabled = 1         " enable signs
let g:lsp_diagnostics_echo_cursor = 1 " enable echo under cursor when in normal mode

let g:lsp_signs_error = {'text': '✗'}
let g:lsp_signs_warning = {'text': '‼'}
'''


# [[plugins]]
# repo='prabirshrestha/asyncomplete.vim'
#
# [[plugins]]
# repo='prabirshrestha/asyncomplete-lsp.vim'

#[[plugins]]
#repo='prabirshrestha/asyncomplete-neosnippet.vim'
#hook_add='''
#call asyncomplete#register_source(asyncomplete#sources#neosnippet#get_source_options({
#    \ 'name': 'neosnippet',
#    \ 'whitelist': ['*'],
#    \ 'completor': function('asyncomplete#sources#neosnippet#completor'),
#    \ }))
#imap <C-k>     <Plug>(neosnippet_expand_or_jump)
#smap <C-k>     <Plug>(neosnippet_expand_or_jump)
#xmap <C-k>     <Plug>(neosnippet_expand_target)
#'''

#[[plugins]]
#repo = 'autozimu/LanguageClient-neovim'
#rev = 'next'
#build = 'bash install.sh'
#hook_add = '''
#source ~/.config/nvim/plugins/LanguageClient-neovim.rc.vim
#'''

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'tomtom/tcomment_vim'

[[plugins]] # GraphQL
repo = 'jparise/vim-graphql'
